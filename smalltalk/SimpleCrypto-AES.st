Object subclass: #SimpleAES	instanceVariableNames: 'state roundKeys'	classVariableNames: ''	poolDictionaries: ''	category: 'SimpleCrypto-AES'!!SimpleAES methodsFor: 'initialize-release' stamp: 'szktty 5/30/2011 19:11'!initialize	state := SimpleAESState new! !!SimpleAES methodsFor: 'transformation' stamp: 'szktty 5/30/2011 23:27'!block	^ state block! !!SimpleAES methodsFor: 'transformation' stamp: 'szktty 5/30/2011 23:27'!block: bytes	state block: bytes! !!SimpleAES methodsFor: 'transformation' stamp: 'szktty 5/31/2011 01:02'!blockSize	^ state blockSize! !!SimpleAES methodsFor: 'transformation' stamp: 'szktty 5/31/2011 10:43'!encryptBlock	state addRoundKey: roundKeys first.	roundKeys allButFirstAndLastDo: [ :roundKey |		state subBytes.		state shiftRows.		state mixColumns.		state addRoundKey: roundKey	].	state subBytes.	state shiftRows.	state addRoundKey: roundKeys last.! !!SimpleAES methodsFor: 'transformation' stamp: 'szktty 6/3/2011 13:59'!expandKey: key	| keyCount roundCount firstRoundKey initWord nextRoundKey rcon nextWord allRoundKeys |	keyCount := key size / 4.	roundCount := keyCount + 6.	firstRoundKey := key asAESWords.	allRoundKeys := OrderedCollection withAll: firstRoundKey.	(1 to: roundCount) inject: firstRoundKey into: [ :roundKey :i |		nextRoundKey := OrderedCollection new.		rcon := SimpleAESWord Rcon at: i + 1.		initWord := roundKey last rotWord subWord RconXor: rcon.		roundKey inject: initWord into: [ :lastWord :eachWord |			"for 256-bit"			(keyCount = 8 and: [ nextRoundKey size = 4])				ifTrue: [ lastWord := lastWord subWord ].			nextWord := lastWord wordXor: eachWord.			nextRoundKey add: nextWord.			nextWord		].		allRoundKeys addAll: nextRoundKey.		nextRoundKey	].	^ (allRoundKeys copyFrom: 1 to: (roundCount + 1) * 4) separatedPerWord! !!SimpleAES methodsFor: 'transformation' stamp: 'szktty 5/31/2011 04:16'!key: bytes	roundKeys := self expandKey: bytes! !!SimpleAES methodsFor: 'accessing' stamp: 'szktty 5/31/2011 04:24'!roundKeys	^ roundKeys! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SimpleAES class	instanceVariableNames: ''!!SimpleAES class methodsFor: 'examples' stamp: 'szktty 5/31/2011 01:05'!example1	| key text |	key := #[16r61 16r5e 16r59 16rec 16r5d 16r54 16r9a 16r27 16r27 16rf3 16r3f 16r57 16r07 16r8d 16r14 16rc6].	text := #[16rd0 16r9d 16r3c 16r71 16rb0 16rba 16r5d 16r32 16rb7 16rf3 16ra1 16r39 16r5a 16r87 16r60 16rfd].	^ SimpleAES encryptInECBMode: text with: key! !!SimpleAES class methodsFor: 'examples' stamp: 'szktty 5/31/2011 15:04'!exampleForExpandingKey128	| aes |	aes := SimpleAES new.	aes key: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0].	^ aes roundKeys! !!SimpleAES class methodsFor: 'examples' stamp: 'szktty 5/31/2011 15:11'!exampleForExpandingKey192	| aes |	aes := SimpleAES new.	aes key: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0].	^ aes roundKeys! !!SimpleAES class methodsFor: 'examples' stamp: 'szktty 5/31/2011 09:51'!exampleForExpandingKey2	| aes |	aes := SimpleAES new.	aes key: #[16r61 16r5e 16r59 16rec 16r5d 16r54 16r9a 16r27 16r27 16rf3 16r3f 16r57 16r07 16r8d 16r14 16rc6].	^ aes roundKeys! !!SimpleAES class methodsFor: 'examples' stamp: 'szktty 5/31/2011 15:49'!exampleForExpandingKey256	| aes |	aes := SimpleAES new.	aes key: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0].	^ aes roundKeys! !!SimpleAES class methodsFor: 'encrypting' stamp: 'szktty 5/31/2011 10:43'!encryptInECBMode: text with: key	| aes input output |	output := #[].	aes := self new.	aes key: key.	1 to: text size by: aes blockSize do: [ :i |		input := text copyFrom: i to: i + aes blockSize - 1.		aes block: input.		aes encryptBlock.		output := output , aes block.	].	^ output! !Object subclass: #SimpleAESState	instanceVariableNames: 'c1 c2 c3 c4'	classVariableNames: ''	poolDictionaries: ''	category: 'SimpleCrypto-AES'!!SimpleAESState methodsFor: 'transformation' stamp: 'szktty 5/31/2011 09:39'!addRoundKey: roundKey	c1 := c1 wordXor: (roundKey at: 1).	c2 := c2 wordXor: (roundKey at: 2).	c3 := c3 wordXor: (roundKey at: 3).	c4 := c4 wordXor: (roundKey at: 4).! !!SimpleAESState methodsFor: 'transformation' stamp: 'szktty 5/31/2011 10:37'!mixColumn: c	| o1 o2 o3 o4 t1 t2 t3 t4 h1 h2 h3 h4|	o1 := c byte1.	o2 := c byte2.	o3 := c byte3.	o4 := c byte4.	t1 := o1 twiceByte.	t2 := o2 twiceByte.	t3 := o3 twiceByte.	t4 := o4 twiceByte.	h1 := o1 threeByte.	h2 := o2 threeByte.	h3 := o3 threeByte.	h4 := o4 threeByte.	^ SimpleAESWord		with: (((t1 bitXor: h2) bitXor: o3) bitXor: o4)		with: (((o1 bitXor: t2) bitXor: h3) bitXor: o4)		with: (((o1 bitXor: o2) bitXor: t3) bitXor: h4)		with: (((h1 bitXor: o2) bitXor: o3) bitXor: t4)! !!SimpleAESState methodsFor: 'transformation' stamp: 'szktty 5/31/2011 10:26'!mixColumns	c1 := self mixColumn: c1.	c2 := self mixColumn: c2.	c3 := self mixColumn: c3.	c4 := self mixColumn: c4.! !!SimpleAESState methodsFor: 'transformation' stamp: 'szktty 5/31/2011 09:47'!shiftRows	| tmp |	"S[1,n]"	tmp := c1 byte2.	c1 byte2: c2 byte2.	c2 byte2: c3 byte2.	c3 byte2: c4 byte2.	c4 byte2: tmp.		"S[2,n]"	tmp := c1 byte3.	c1 byte3: c3 byte3.	c3 byte3: tmp.	tmp := c2 byte3.	c2 byte3: c4 byte3.	c4 byte3: tmp.		"S[3,n]"	tmp := c4 byte4.	c4 byte4: c3 byte4.	c3 byte4: c2 byte4.	c2 byte4: c1 byte4.	c1 byte4: tmp.	! !!SimpleAESState methodsFor: 'transformation' stamp: 'szktty 5/31/2011 09:42'!subBytes	c1 := c1 subWord.	c2 := c2 subWord.	c3 := c3 subWord.	c4 := c4 subWord.! !!SimpleAESState methodsFor: 'accessing' stamp: 'szktty 5/31/2011 03:44'!block	^ c1 asByteArray, c2 asByteArray, c3 asByteArray, c4 asByteArray! !!SimpleAESState methodsFor: 'accessing' stamp: 'szktty 5/31/2011 03:42'!block: bytes	| words |	words := bytes AESWords.	c1 := words at: 1.	c2 := words at: 2.	c3 := words at: 3.	c4 := words at: 4.! !!SimpleAESState methodsFor: 'accessing' stamp: 'szktty 5/31/2011 01:03'!blockSize	^ 16! !!SimpleAESState methodsFor: 'printing' stamp: 'szktty 5/31/2011 04:08'!printOn: stream	stream nextPutAll: c1 byte1 hex, ' ', c2 byte1 hex, ' ', c3 byte1 hex, ' ', c4 byte1 hex, String crlf,	c1 byte2 hex, ' ', c2 byte2 hex, ' ', c3 byte2 hex, ' ', c4 byte2 hex, String crlf,	c1 byte3 hex, ' ', c2 byte3 hex, ' ', c3 byte3 hex, ' ', c4 byte3 hex, String crlf,	c1 byte4 hex, ' ', c2 byte4 hex, ' ', c3 byte4 hex, ' ', c4 byte4 hex, String crlf! !SimpleWord subclass: #SimpleAESWord	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SimpleCrypto-AES'!!SimpleAESWord methodsFor: 'word manipulation' stamp: 'szktty 6/2/2011 01:58'!RconXor: value	^ self class with: (b1 bitXor: value) with: b2 with: b3 with: b4! !!SimpleAESWord methodsFor: 'word manipulation' stamp: 'szktty 6/2/2011 01:58'!rotWord	^ self class with: b2 with: b3 with: b4 with: b1! !!SimpleAESWord methodsFor: 'word manipulation' stamp: 'szktty 6/2/2011 01:58'!subWord	| sbox |	sbox := self class SBOX.	^ self class with: (sbox at: b1 + 1) with: (sbox at: b2 + 1) with: (sbox at: b3 + 1) with: (sbox at: b4 + 1)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SimpleAESWord class	instanceVariableNames: ''!!SimpleAESWord class methodsFor: 'constants' stamp: 'szktty 5/31/2011 15:49'!Rcon	^#[16r8d 16r01 16r02 16r04 16r08 16r10 16r20 16r40 16r80 16r1b 16r36 16r6c		"dummy" 16r00 16r00 16r00]! !!SimpleAESWord class methodsFor: 'constants' stamp: 'szktty 5/30/2011 19:19'!SBOX	^#[16r63 16r7c 16r77 16r7b 16rf2 16r6b 16r6f 16rc5 16r30 16r01 16r67 16r2b 16rfe 16rd7 16rab 16r76 	16rca 16r82 16rc9 16r7d 16rfa 16r59 16r47 16rf0 16rad 16rd4 16ra2 16raf 16r9c 16ra4 16r72 16rc0	16rb7 16rfd 16r93 16r26 16r36 16r3f 16rf7 16rcc 16r34 16ra5 16re5 16rf1 16r71 16rd8 16r31 16r15	16r04 16rc7 16r23 16rc3 16r18 16r96 16r05 16r9a 16r07 16r12 16r80 16re2 16reb 16r27 16rb2 16r75	16r09 16r83 16r2c 16r1a 16r1b 16r6e 16r5a 16ra0 16r52 16r3b 16rd6 16rb3 16r29 16re3 16r2f 16r84	16r53 16rd1 16r00 16red 16r20 16rfc 16rb1 16r5b 16r6a 16rcb 16rbe 16r39 16r4a 16r4c 16r58 16rcf	16rd0 16ref 16raa 16rfb 16r43 16r4d 16r33 16r85 16r45 16rf9 16r02 16r7f 16r50 16r3c 16r9f 16ra8	16r51 16ra3 16r40 16r8f 16r92 16r9d 16r38 16rf5 16rbc 16rb6 16rda 16r21 16r10 16rff 16rf3 16rd2	16rcd 16r0c 16r13 16rec 16r5f 16r97 16r44 16r17 16rc4 16ra7 16r7e 16r3d 16r64 16r5d 16r19 16r73	16r60 16r81 16r4f 16rdc 16r22 16r2a 16r90 16r88 16r46 16ree 16rb8 16r14 16rde 16r5e 16r0b 16rdb	16re0 16r32 16r3a 16r0a 16r49 16r06 16r24 16r5c 16rc2 16rd3 16rac 16r62 16r91 16r95 16re4 16r79	16re7 16rc8 16r37 16r6d 16r8d 16rd5 16r4e 16ra9 16r6c 16r56 16rf4 16rea 16r65 16r7a 16rae 16r08	16rba 16r78 16r25 16r2e 16r1c 16ra6 16rb4 16rc6 16re8 16rdd 16r74 16r1f 16r4b 16rbd 16r8b 16r8a	16r70 16r3e 16rb5 16r66 16r48 16r03 16rf6 16r0e 16r61 16r35 16r57 16rb9 16r86 16rc1 16r1d 16r9e	16re1 16rf8 16r98 16r11 16r69 16rd9 16r8e 16r94 16r9b 16r1e 16r87 16re9 16rce 16r55 16r28 16rdf	16r8c 16ra1 16r89 16r0d 16rbf 16re6 16r42 16r68 16r41 16r99 16r2d 16r0f 16rb0 16r54 16rbb 16r16]! !