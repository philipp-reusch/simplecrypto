Object subclass: #SimpleSHA1State	instanceVariableNames: 'w1 w2 w3 w4 w5'	classVariableNames: ''	poolDictionaries: ''	category: 'SimpleCrypto-SHA'!!SimpleSHA1State methodsFor: 'initialize-release' stamp: 'szktty 6/5/2011 17:32'!initialize	w1 := SimpleWord withAll: #[16r67 16r45 16r23 16r01].	w2 := SimpleWord withAll: #[16ref 16rcd 16rab 16r89].	w3 := SimpleWord withAll: #[16r98 16rba 16rdc 16rfe].	w4 := SimpleWord withAll: #[16r10 16r32 16r54 16r76].	w5 := SimpleWord withAll: #[16rc3 16rd2 16re1 16rf0]	! !!SimpleSHA1State methodsFor: 'accessing' stamp: 'szktty 6/5/2011 17:45'!word1	^ w1! !!SimpleSHA1State methodsFor: 'accessing' stamp: 'szktty 6/5/2011 17:45'!word2	^ w2! !!SimpleSHA1State methodsFor: 'accessing' stamp: 'szktty 6/5/2011 17:45'!word3	^ w3! !!SimpleSHA1State methodsFor: 'accessing' stamp: 'szktty 6/5/2011 17:45'!word4	^ w4! !!SimpleSHA1State methodsFor: 'accessing' stamp: 'szktty 6/5/2011 17:45'!word5	^ w5! !!SimpleSHA1State methodsFor: 'transformation' stamp: 'szktty 6/6/2011 01:24'!digest	^ w1 asByteArray, w2 asByteArray, w3 asByteArray, w4 asByteArray, w5 asByteArray! !!SimpleSHA1State methodsFor: 'transformation' stamp: 'szktty 6/5/2011 18:20'!f: t b: b c: c d: d	(0 <= t and: [ t <= 20 ]) ifTrue: [		^ (b wordAnd: c) wordOr: (b wordNot wordAnd: d) ].	(21 <= t and: [ t <= 40 ]) ifTrue: [ ^ (b wordXor: c) wordXor: d ].	(41 <= t and: [ t <= 60 ]) ifTrue: [		^ ((b wordAnd: c) wordOr: (b wordAnd: d)) wordOr: (c wordAnd: d) ].	(61 <= t and: [ t <= 80 ]) ifTrue: [ ^ (b wordXor: c) wordXor: d ].! !!SimpleSHA1State methodsFor: 'transformation' stamp: 'szktty 6/7/2011 01:27'!hashWith: block	| expandedWords temp a b c d e |	"Transcript show: 'hash: '; show: w1; cr."	expandedWords := block expandedWords.	"Transcript show: 'expanded words: '; show: expandedWords; cr."	a := w1.	b := w2.	c := w3.	d := w4.	e := w5.	1 to: 80 do: [ :t |		temp := (a wordRot: 5) +			(self f: t b: b c: c d: d) + e + (expandedWords at: t) + (self k: t).		"Transcript show: 'step8: '; show: t; show: ': ';			show: (a wordRot: 5) hex; show: ' + ';			show: (self f: t b: b c: c d: d) hex; show: ' + ';			show: e hex; show: ' + ';			show: (expandedWords at: t)  hex; show: ' + ';			show: (self k: t) hex; show: ' = ';			show: temp; cr."		e := d.		d := c.		c := b wordRot: 30.		b := a.		a := temp ].	w1 := w1 + a.	w2 := w2 + b.	w3 := w3 + c.	w4 := w4 + d.	w5 := w5 + e.	^ w1 asByteArray, w2 asByteArray, w3 asByteArray, w4 asByteArray, w5 asByteArray! !!SimpleSHA1State methodsFor: 'transformation' stamp: 'szktty 6/5/2011 18:09'!k: t	(0 <= t and: [ t <= 20 ]) ifTrue: [ ^ SimpleWord fromHex: '5a827999' ].	(21 <= t and: [ t <= 40 ]) ifTrue: [ ^ SimpleWord fromHex: '6ed9eba1' ].	(41 <= t and: [ t <= 60 ]) ifTrue: [ ^ SimpleWord fromHex: '8f1bbcdc' ].	(61 <= t and: [ t <= 80 ]) ifTrue: [ ^ SimpleWord fromHex: 'ca62c1d6' ].! !SimpleBlock subclass: #SimpleSHABlock	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SimpleCrypto-SHA'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SimpleSHABlock class	instanceVariableNames: ''!!SimpleSHABlock class methodsFor: 'instance creation' stamp: 'szktty 6/7/2011 00:51'!from: bytes startingAt: i	| msgSize to msg msgLen|	msgSize := self messageSize.	to := i + msgSize - 1.	bytes size >= to		ifTrue: [			msg := bytes copyFrom: i to: to.			msgLen := msgSize ]		ifFalse: [			msg := self forceBytes: (bytes copyFrom: i to: bytes size) to: msgSize.			msgLen := bytes size - i + 1 ].	msgLen := msgLen * 8.	^ self with: (msg, (msgLen asByteArray reversed			forceTo: self messageLengthSize paddingWith: 16r00) reversed)! !!SimpleSHABlock class methodsFor: 'accessing' stamp: 'szktty 6/3/2011 01:54'!messageLengthSize	^ 8! !!SimpleSHABlock class methodsFor: 'accessing' stamp: 'szktty 6/3/2011 01:54'!messageSize	^ 56! !!SimpleSHABlock class methodsFor: 'transformation' stamp: 'szktty 6/3/2011 02:06'!forceBytes: bytes	^ self forceBytes: bytes to: self blockSize! !!SimpleSHABlock class methodsFor: 'transformation' stamp: 'szktty 6/3/2011 02:06'!forceBytes: bytes to: size	^ bytes size < size		ifTrue: [ (bytes, #[2r10000000]) forceTo: size paddingWith: 0 ]		ifFalse: [ bytes ]! !SimpleSHABlock subclass: #SimpleSHA1Block	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SimpleCrypto-SHA'!!SimpleSHA1Block methodsFor: 'transformation' stamp: 'szktty 6/7/2011 01:30'!expandedWords	| words word |	words := OrderedCollection new.	(bytes separatedPer: 4) do: [ :each |		words add: (SimpleWord withAll: each) ].	"Transcript show: 'base words: '; show: words; cr."	17 to: 80 do: [ :t |		"Transcript show: t; show: ': (';			show: (words at: t - 3) asInteger hex; show: ',';			show: (words at: t - 8) asInteger hex; show: ',';			show: (words at: t - 14) asInteger hex; show: ',';			show: (words at: t - 16) asInteger hex; show: '): ';			show: ((((((words at: t - 3) wordXor: (words at: t - 8))			wordXor: (words at: t - 14)) wordXor: (words at: t - 16)))) asInteger hex; show: ' -> ';			show: ((((((words at: t - 3) wordXor: (words at: t - 8))			wordXor: (words at: t - 14)) wordXor: (words at: t - 16))) wordRot: 1) asInteger hex;cr."		word := ((((((words at: t - 3) wordXor: (words at: t - 8))			wordXor: (words at: t - 14)) wordXor: (words at: t - 16))) wordRot: 1).		words add: word ].	^ words! !SimpleHash subclass: #SimpleSHAHash	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SimpleCrypto-SHA'!!SimpleSHAHash methodsFor: 'transformation' stamp: 'szktty 6/2/2011 14:31'!forceBytes: bytes to: size! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SimpleSHAHash class	instanceVariableNames: ''!!SimpleSHAHash class methodsFor: 'accessing' stamp: 'szktty 6/3/2011 02:08'!blockClass	self subclassResponsibility! !!SimpleSHAHash class methodsFor: 'accessing' stamp: 'szktty 6/3/2011 02:08'!blockSize	^ self blockClass blockSize! !SimpleSHAHash subclass: #SimpleSHA1	instanceVariableNames: 'state'	classVariableNames: ''	poolDictionaries: ''	category: 'SimpleCrypto-SHA'!!SimpleSHA1 methodsFor: 'initialize-release' stamp: 'szktty 6/2/2011 02:08'!initialize	state := SimpleSHA1State new.! !!SimpleSHA1 methodsFor: 'transformation' stamp: 'szktty 6/3/2011 02:03'!blocksFrom: bytes	| blocks |	blocks := OrderedCollection new.	1 to: bytes size by: SimpleSHA1Block messageSize do: [ :i |		blocks add: (SimpleSHA1Block from: bytes startingAt: i) ].	^ blocks asArray! !!SimpleSHA1 methodsFor: 'transformation' stamp: 'szktty 6/6/2011 01:23'!digest	^ state digest! !!SimpleSHA1 methodsFor: 'transformation' stamp: 'szktty 6/5/2011 17:51'!hashWith: block	state hashWith: block! !!SimpleSHA1 methodsFor: 'transformation' stamp: 'szktty 6/5/2011 17:50'!updateWith: bytes	(self blocksFrom: bytes) do: [ :block |		self hashWith: block	]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SimpleSHA1 class	instanceVariableNames: ''!!SimpleSHA1 class methodsFor: 'accessing' stamp: 'szktty 6/3/2011 02:09'!blockClass	^ SimpleSHA1Block! !!SimpleSHA1 class methodsFor: 'accessing' stamp: 'szktty 6/2/2011 00:56'!digestSize	^ 20! !!SimpleSHA1 class methodsFor: 'examples' stamp: 'szktty 6/7/2011 00:24'!example1	| text |	"expected '1f09d30c707d53f3d16c530dd73d70a6ce7596a9'"	text := 'hello, world!!' asByteArray.	^ text SHA1Value! !